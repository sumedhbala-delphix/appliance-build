#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# shellcheck disable=SC1090
. "${BASH_SOURCE%/*}/common.sh"

turn_verbose_logging_on

IMAGE_VERSION=$(get_image_version)
[[ -n "$IMAGE_VERSION" ]] || die "failed to determine image version"

function verify_jar_verify_cleanup() {
	local rc="$?"

	report_progress 90 "Cleaning up application upgrade verification"

	#
	# This name is used by the "upgrade-verify.jar" just executed, so we
	# cannot change this value without also modifying that JAR.
	#
	MDS_SNAPNAME="MDS-CLONE-upgradeverify"

	if /opt/delphix/server/bin/dx_manage_pg isrunning -s ${MDS_SNAPNAME}; then
		/opt/delphix/server/bin/dx_manage_pg stop -s "${MDS_SNAPNAME}" ||
			die "failed to stop postgres for snapshot '${MDS_SNAPNAME}'."
	fi

	if zfs list "domain0/${MDS_SNAPNAME}" &>/dev/null; then
		/opt/delphix/server/bin/dx_manage_pg cleanup -s "${MDS_SNAPNAME}" ||
			die "failed to cleanup postgres for snapshot '${MDS_SNAPNAME}'."
	fi

	[[ $rc -eq 0 ]] &&
		# On success, we must report 100 progress. Java stack treats
		# script execution a failure if non-zero status is reported or
		# 100 progress is not reported.
		report_progress 100 "Upgrade verification was successful"
	return "$rc"
}

function usage() {
	echo "$(basename "$0"): $*" >&2

	PREFIX_STRING="Usage: $(basename "$0")"
	PREFIX_NCHARS=$(echo -n "$PREFIX_STRING" | wc -c)
	PREFIX_SPACES=$(printf "%.s " $(seq "$PREFIX_NCHARS"))

	echo "$PREFIX_STRING [-d] [-f format] [-l locale] [-o path]"
	echo "$PREFIX_SPACES [-fsCheckStartTs ts] [-fsCheckEndTs ts]"
	echo "$PREFIX_SPACES [-containerInitStartTs ts] [-containerInitEndTs ts]"

	exit 2
}

#
# Optional timestamp parameters from managment stack. These timestamps
# are for inclusion in the verification report output of the verify jar.
#
OPTIONS_LONG=(
	"containerInitStartTs:"
	"containerInitEndTs:"
	"fsCheckStartTs:"
	"fsCheckEndTs:"
	"help"
)

OPTIONS_SHORT=(
	"d"
	"f:"
	"h"
	"l:"
	"o:"
)

GETOPT=$(getopt --alternative \
	--name "$(basename "$0")" \
	--options "$(printf "%s," "${OPTIONS_SHORT[@]}")" \
	--longoptions "$(printf "%s," "${OPTIONS_LONG[@]}")" \
	-- "$@") || usage "$@"
eval set -- "$GETOPT"

opt_d=false
while true; do
	case "$1" in
	-d)
		opt_d=true
		shift
		;;
	-f)
		opt_f="$2"
		shift 2
		;;
	-h)
		usage "$@"
		shift
		;;
	-l)
		opt_l="$2"
		shift 2
		;;
	-o)
		opt_o="$2"
		shift 2
		;;
	--containerInitStartTs)
		opt_initStartTs="$2"
		shift 2
		;;
	--containerInitEndTs)
		opt_initEndTs="$2"
		shift 2
		;;
	--fsCheckStartTs)
		opt_fsStartTs="$2"
		shift 2
		;;
	--fsCheckEndTs)
		opt_fsEndTs="$2"
		shift 2
		;;
	--help)
		usage "$@"
		shift
		;;
	*) break ;;
	esac
done

report_progress 10 "Started application upgrade verification"

[[ "$EUID" -ne 0 ]] && die "must be run as root"

JAVA_PARAMETERS=(
	"-Dlog.dir=/var/delphix/server/upgrade-verify"
	"-Dmdsverify=true"
	"-jar" "/opt/delphix/server/lib/exec/upgrade-verify/upgrade-verify.jar"
)

if [[ -n "$DLPX_DEBUG" ]] && $DLPX_DEBUG; then
	JAVA_PARAMETERS=(
		"${JAVA_PARAMETERS[@]}"
		"-Ddelphix.debug=true"
	)
fi

VERIFY_OPTIONS=(
	"-d" "${opt_o:-${LOG_DIRECTORY}/${CONTAINER}/upgrade_verify.json}"
	"-f" "${opt_f:-1}"
	"-l" "${opt_l:-en-US}"
	"-v" "$IMAGE_VERSION"
	"-pl" "25"
	"-ph" "80"
)

if [[ -n "$opt_fsStartTs" ]] && [[ -n "$opt_fsEndTs" ]]; then
	VERIFY_OPTIONS=(
		"${VERIFY_OPTIONS[@]}"
		"-fsCheckStartTs" "$opt_fsStartTs"
		"-fsCheckEndTs" "$opt_fsEndTs"
	)
fi

if [[ -n "$opt_initStartTs" ]] && [[ -n "$opt_initEndTs" ]]; then
	VERIFY_OPTIONS=(
		"${VERIFY_OPTIONS[@]}"
		"-containerInitStartTs" "$opt_initStartTs"
		"-containerInitEndTs" "$opt_initEndTs"
	)
fi

if $opt_d; then
	VERIFY_OPTIONS=(
		"${VERIFY_OPTIONS[@]}"
		"-disableConsistentMdsZfsDataUtil"
	)
fi

trap verify_jar_verify_cleanup EXIT

report_progress 20 "Running application upgrade verification"

/usr/bin/java "${JAVA_PARAMETERS[@]}" "${VERIFY_OPTIONS[@]}" ||
	die "'upgrade-verify.jar' failed in verification container"

#
# The cleanup logic will be run on EXIT, so rather than reporting 100
# percent here, we use the cleanup logic to do the final reporting.
#
